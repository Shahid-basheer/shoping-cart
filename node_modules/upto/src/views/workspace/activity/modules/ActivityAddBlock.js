import React, { Component } from 'react'
import { Notification } from '@mogu/up-components'

export default class ActivityAddBlock extends Component {
    constructor(){
        super();
        this.state = {
            formData: {
            },
            configData: {
            },
            otherData: {
            },
            queryData: {
            },
            status: {
                isSubmit: false
            }
        };

    }

    // 获取表单数据
    fetchFormData () {
    }

    // 获取基础数据
    fetchConfigData () {
    }

    setStateSafe (obj) {
        if (this.mounted) {
            this.setState(obj);
        }
    }

    setStateObj(parentKey, key, value) {
        let copy = this.state[parentKey];
        copy[key] = value;
        let newObj = {};
        newObj[parentKey] = copy;
        this.setStateSafe(newObj);
    }

    handleChange () {
        
    }

    save (e) {
        e.preventDefault();
        this._save( () => {
            this.props.router.push('');
        });
    }

    
    // 保存
    _save (callback) {
        this.setStateObj('status', 'isSubmit', true);
        
        var postData = JSON.parse( JSON.stringify(this.state.formData) );
        var url = '';
        var type = 'POST';
    
        
        // 提交
        Util.fetch({
            url: url,
            data: postData,
            type: type
        }).then(resData => {
            
            if (resData && resData.status == 1001) {
                if (callback) {
                    callback(resData);
                }
                // 提交成功
                Notification.success({ 
                    message: resData.message || '成功！',
                    duration: 2
                });
            }
                 
        }).always(()=>{
            this.setStateObj('status', 'isSubmit', false);
        });
    }

    // 挂载回调
    componentDidMount(){
        this.mounted = true;
        this.fetchFormData();
        this.fetchConfigData();
    }

    componentWillUnmount() {
        this.mounted = false;
    }

    
   
    // 渲染
    render() {

        let {otherData, formData, status, queryData, configData} = this.state;
        let {...parentProps} = this.props;

        return (
            <div> 
                
            </div>
        )
    }
}